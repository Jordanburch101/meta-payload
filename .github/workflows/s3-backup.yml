name: Supabase S3 to Dropbox Incremental Backup

on:
  schedule:
    - cron: '0 0 * * *'  # Runs at 00:00 UTC daily
  workflow_dispatch:      # Allows manual trigger

env:
  S3_ENDPOINT: 'https://vfmxvvugriytncpzypvm.supabase.co/storage/v1/s3'
  S3_REGION: 'ap-southeast-2'
  BACKUP_RETENTION_DAYS: 30
  BETTER_STACK_HEARTBEAT: 'https://uptime.betterstack.com/api/v1/heartbeat/PgcWvW8C3Navz8Eo3aYC1WF4'

jobs:
  backup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 dropbox requests

      - name: Start Heartbeat
        run: |
          curl -X GET ${{ env.BETTER_STACK_HEARTBEAT }}/start

      - name: Perform incremental backup and cleanup
        env:
          DROPBOX_APP_KEY: ${{ secrets.DROPBOX_APP_KEY }}
          DROPBOX_APP_SECRET: ${{ secrets.DROPBOX_APP_SECRET }}
          DROPBOX_REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          S3_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
          S3_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
        run: |
          python -c '
import boto3
import dropbox
import os
import shutil
import requests
from pathlib import Path
from datetime import datetime, timedelta

def send_heartbeat(status, msg=""):
    """Send heartbeat to Better Stack"""
    heartbeat_url = os.environ["BETTER_STACK_HEARTBEAT"]
    if status == "fail":
        heartbeat_url += "/fail"
    try:
        response = requests.get(f"{heartbeat_url}?msg={msg}")
        print(f"Heartbeat sent: {status} - {msg}")
    except Exception as e:
        print(f"Failed to send heartbeat: {str(e)}")

def refresh_access_token():
    """Manually refresh the access token using refresh token"""
    app_key = os.environ["DROPBOX_APP_KEY"]
    app_secret = os.environ["DROPBOX_APP_SECRET"]
    refresh_token = os.environ["DROPBOX_REFRESH_TOKEN"]
    token_url = "https://api.dropboxapi.com/oauth2/token"
    data = {
        "grant_type": "refresh_token",
        "refresh_token": refresh_token,
        "client_id": app_key,
        "client_secret": app_secret,
    }
    response = requests.post(token_url, data=data)
    response_json = response.json()
    if response.status_code == 200:
        print("Successfully refreshed access token")
        return response_json["access_token"]
    else:
        raise Exception(f"Failed to refresh access token: {response_json.get('error_description', 'Unknown error')}")

def get_dropbox_client():
    """Initialize Dropbox client with manual token refresh"""
    access_token = refresh_access_token()
    return dropbox.Dropbox(access_token)

def clean_directory(directory):
    """Recursively remove a directory and its contents"""
    if isinstance(directory, str):
        directory = Path(directory)
    if directory.exists():
        shutil.rmtree(directory)

# Initialize variables
temp_dir = Path("temp")

try:
    print("Starting backup process...")
    # Initialize S3 client
    session = boto3.Session(
        aws_access_key_id=os.environ["S3_ACCESS_KEY_ID"],
        aws_secret_access_key=os.environ["S3_SECRET_ACCESS_KEY"],
        region_name=os.environ["S3_REGION"]
    )
    s3 = session.client("s3", endpoint_url=os.environ["S3_ENDPOINT"])
    clean_directory(temp_dir)
    temp_dir.mkdir(exist_ok=True)

    # Initialize Dropbox client
    dbx = get_dropbox_client()

    # [Add backup and upload logic here]

    print("Backup completed successfully")
    send_heartbeat("success")

except Exception as e:
    print(f"Error during backup process: {str(e)}")
    send_heartbeat("fail", str(e))
    raise

finally:
    clean_directory(temp_dir)
          '

      - name: Send Final Heartbeat on Failure
        if: failure()
        run: |
          curl -X GET ${{ env.BETTER_STACK_HEARTBEAT }}/fail

      - name: Send Final Heartbeat on Success
        if: success()
        run: |
          curl -X GET ${{ env.BETTER_STACK_HEARTBEAT }}
