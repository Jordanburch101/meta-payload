name: Supabase S3 to Dropbox Incremental Backup

on:
  schedule:
    - cron: '0 0 * * *'  # Runs at 00:00 UTC daily
  workflow_dispatch:      # Allows manual trigger

env:
  S3_ENDPOINT: 'https://vfmxvvugriytncpzypvm.supabase.co/storage/v1/s3'
  S3_REGION: 'ap-southeast-2'
  BACKUP_RETENTION_DAYS: 30
  BETTER_STACK_HEARTBEAT: 'https://uptime.betterstack.com/api/v1/heartbeat/PgcWvW8C3Navz8Eo3aYC1WF4'

jobs:
  backup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 dropbox requests

      - name: Start Heartbeat
        run: |
          curl -X GET ${{ env.BETTER_STACK_HEARTBEAT }}/start

      - name: Perform incremental backup and cleanup
        env:
          DROPBOX_APP_KEY: ${{ secrets.DROPBOX_APP_KEY }}
          DROPBOX_APP_SECRET: ${{ secrets.DROPBOX_APP_SECRET }}
          DROPBOX_REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          S3_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
          S3_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
        run: |
          python -c '
          import boto3
          import dropbox
          from dropbox import DropboxOAuth2FlowNoRedirect
          import datetime
          import os
          import json
          import shutil
          import requests
          from pathlib import Path
          from datetime import datetime, timedelta
          
          def send_heartbeat(status, msg=""):
              """Send heartbeat to Better Stack"""
              heartbeat_url = os.environ["BETTER_STACK_HEARTBEAT"]
              if status == "fail":
                  heartbeat_url += "/fail"
              try:
                  response = requests.get(f"{heartbeat_url}?msg={msg}")
                  print(f"Heartbeat sent: {status} - {msg}")
              except Exception as e:
                  print(f"Failed to send heartbeat: {str(e)}")
          
          def get_dropbox_client():
              """Initialize Dropbox client with refresh token flow"""
              try:
                  app_key = os.environ["DROPBOX_APP_KEY"]
                  app_secret = os.environ["DROPBOX_APP_SECRET"]
                  refresh_token = os.environ["DROPBOX_REFRESH_TOKEN"]
                  
                  # Initialize client with refresh token
                  return dropbox.Dropbox(
                      oauth2_refresh_token=refresh_token,
                      app_key=app_key,
                      app_secret=app_secret
                  )
              except Exception as e:
                  print(f"Error initializing Dropbox client: {str(e)}")
                  raise
          
          # Initialize S3 client with Supabase config
          session = boto3.Session(
              aws_access_key_id=os.environ["S3_ACCESS_KEY_ID"],
              aws_secret_access_key=os.environ["S3_SECRET_ACCESS_KEY"],
              region_name=os.environ["S3_REGION"]
          )
          
          s3 = session.client("s3",
              endpoint_url=os.environ["S3_ENDPOINT"],
              config=boto3.session.Config(signature_version="s3v4")
          )
          
          # Initialize Dropbox client with refresh token support
          dbx = get_dropbox_client()
          
          [... rest of the code remains the same ...]
          '

      - name: Send Final Heartbeat on Failure
        if: failure()
        run: |
          curl -X GET ${{ env.BETTER_STACK_HEARTBEAT }}/fail

      - name: Send Final Heartbeat on Success
        if: success()
        run: |
          curl -X GET ${{ env.BETTER_STACK_HEARTBEAT }}
